{"version":3,"sources":["components/Talon/Talon.tsx","components/GaigelCard/GaigelCard.tsx","components/TrumpCard/TrumpCard.tsx","components/PlayingField/PlayingField.tsx","components/UserCards/UserCards.tsx","components/Gaigel/Gaigel.tsx","App.tsx","GlobalStyle.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","display","flexDirection","alignItems","cardActionArea","height","paper","justifyContent","counter","marginTop","header","marginBottom","Talon","cardsLeft","drawCard","classes","Grid","item","className","Typography","Paper","CardActionArea","onClick","variant","align","GaigelCard","type","value","clickable","playCard","symbolMap","style","border","pointerEvents","Box","footer","TrumpCard","trumpCard","PlayingField","playedCards","playerCount","i","useState","Array","fill","cards","setCards","useEffect","tempCards","length","push","container","spacing","map","card","UserCards","userCards","margin","Gaigel","response","setResponse","talonCards","setTalonCards","setTrumpCard","setPlayedCards","setUserCards","amount","drawnCards","slice","newUserCards","forEach","sort","a","b","points","Map","set","get","trump","fisherYatesShuffle","arr","j","Math","floor","random","handOutCards","newTrumpCard","chooseTrumpCard","console","log","values","newTalon","createTalon","socketIOClient","on","data","alignContent","actualPlayedCards","filter","playedCardIndex","findIndex","index","App","GlobalStyle","createGlobalStyle","theme","createTheme","palette","primary","main","secondary","background","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ee6cdbee.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport GaigelCard from \"../../components/GaigelCard/GaigelCard\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 100,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    cardActionArea: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    paper: {\r\n        width: 50,\r\n        height: 75,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    counter: {\r\n        marginTop: 10,\r\n    },\r\n    header: {\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    cardsLeft: number;\r\n    drawCard: (amount: number) => void;\r\n}\r\n\r\nconst Talon: React.FC<Props> = ({ cardsLeft, drawCard }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item className={classes.root}>\r\n            <Typography className={classes.header}>Talon</Typography>\r\n            <Paper className={classes.paper}>\r\n                <CardActionArea\r\n                    className={classes.cardActionArea}\r\n                    onClick={() => {\r\n                        drawCard(1);\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h4\" align=\"center\">\r\n                        üÉè\r\n                    </Typography>\r\n                </CardActionArea>\r\n            </Paper>\r\n            <Typography className={classes.counter}>Cards left: {cardsLeft}</Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Talon;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 50,\r\n        height: 75,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    cardActionArea: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    type: string;\r\n    value: string;\r\n    clickable: boolean;\r\n    playCard?: (type: string, value: string) => void;\r\n}\r\n\r\ninterface Hash {\r\n    [details: string]: string;\r\n}\r\n\r\nconst GaigelCard: React.FC<Props> = ({ type, value, clickable, playCard }) => {\r\n    const classes = useStyles();\r\n    const symbolMap: Hash = {};\r\n    symbolMap[\"Eichel\"] = \"‚ô£Ô∏è\";\r\n    symbolMap[\"Eichel2\"] = \"‚ôß\";\r\n    symbolMap[\"Blatt\"] = \"‚ô†Ô∏è\";\r\n    symbolMap[\"Blatt2\"] = \"‚ô§\";\r\n    symbolMap[\"Herz\"] = \"‚ô•Ô∏è\";\r\n    symbolMap[\"Herz2\"] = \"‚ô°\";\r\n    symbolMap[\"Schellen\"] = \"‚ô¶Ô∏è\";\r\n    symbolMap[\"Schellen2\"] = \"‚ô¢\";\r\n\r\n    return (\r\n        <Paper\r\n            className={classes.root}\r\n            style={{ border: type === \"\" ? \"1px dashed lightgrey\" : \"\" }}\r\n            onClick={() => {\r\n                if (clickable && typeof playCard !== \"undefined\") playCard(type, value);\r\n            }}\r\n        >\r\n            <CardActionArea\r\n                className={classes.cardActionArea}\r\n                style={{ pointerEvents: clickable ? \"auto\" : \"none\" }}\r\n            >\r\n                <Box>\r\n                    <Typography align=\"center\">\r\n                        {symbolMap[type + \"2\"]}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        {symbolMap[type]}\r\n                    </Typography>\r\n                    <Typography align=\"center\">{value}</Typography>\r\n                    <Typography align=\"center\">\r\n                        {symbolMap[type]}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                        {symbolMap[type + \"2\"]}\r\n                    </Typography>\r\n                </Box>\r\n            </CardActionArea>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default GaigelCard;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport GaigelCard from \"../../components/GaigelCard/GaigelCard\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 100,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    header: {\r\n        marginBottom: 10,\r\n    },\r\n    footer: {\r\n        marginTop: 10,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    trumpCard: CardProps;\r\n}\r\n\r\ninterface CardProps {\r\n    type: string;\r\n    value: string;\r\n}\r\n\r\nconst TrumpCard: React.FC<Props> = ({ trumpCard }) => {\r\n    const classes = useStyles();\r\n    let emptyChar: string = \"‚†Ä\";\r\n\r\n    return (\r\n        <Grid className={classes.root}>\r\n            <Typography className={classes.header}>Trump</Typography>\r\n            <GaigelCard type={trumpCard.type} value={trumpCard.value} clickable={false} />\r\n            <Typography className={classes.footer}>{emptyChar}</Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TrumpCard;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport GaigelCard from \"../../components/GaigelCard/GaigelCard\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: 100,\r\n    },\r\n    header: {\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    playedCards: CardProps[];\r\n    playerCount: number;\r\n}\r\n\r\ninterface CardProps {\r\n    type: string;\r\n    value: string;\r\n}\r\n\r\nconst PlayingField: React.FC<Props> = ({ playedCards, playerCount }) => {\r\n    const classes = useStyles();\r\n    let i: number = 0;\r\n\r\n    const [cards, setCards] = useState<CardProps[]>(\r\n        new Array(playerCount).fill({ type: \"\", value: \"\" })\r\n    );\r\n\r\n    useEffect(() => {\r\n        let tempCards: CardProps[] = playedCards;\r\n        for (let i = playedCards.length; i < playerCount; i++) {\r\n            tempCards.push({ type: \"\", value: \"\" });\r\n        }\r\n        setCards(tempCards);\r\n    }, [playedCards, playerCount]);\r\n\r\n    return (\r\n        <Grid container justifyContent=\"center\" className={classes.root}>\r\n            <Typography className={classes.header}>Played cards:</Typography>\r\n\r\n            <Grid container spacing={2} justifyContent=\"center\">\r\n                {cards.map((card) => {\r\n                    i++;\r\n                    return (\r\n                        <Grid item key={i}>\r\n                            <GaigelCard type={card.type} value={card.value} clickable={false} />\r\n                        </Grid>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PlayingField;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport GaigelCard from \"../../components/GaigelCard/GaigelCard\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: 100,\r\n    },\r\n    header: {\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    userCards: CardProps[];\r\n    playCard: (type: string, value: string) => void;\r\n}\r\n\r\ninterface CardProps {\r\n    type: string;\r\n    value: string;\r\n}\r\n\r\nconst UserCards: React.FC<Props> = ({ userCards, playCard }) => {\r\n    const classes = useStyles();\r\n    let i: number = 0;\r\n\r\n    return (\r\n        <Grid container className={classes.root} justifyContent=\"center\">\r\n            <Typography className={classes.header}>Your cards:</Typography>\r\n\r\n            <Grid container spacing={2} justifyContent=\"center\">\r\n                {userCards.map((card) => {\r\n                    i++;\r\n                    return (\r\n                        <Grid item key={i}>\r\n                            <GaigelCard\r\n                                type={card.type}\r\n                                value={card.value}\r\n                                clickable={true}\r\n                                playCard={playCard}\r\n                            />\r\n                        </Grid>\r\n                    );\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default UserCards;\r\n","import { useEffect, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Talon from \"../../components/Talon/Talon\";\r\nimport TrumpCard from \"../../components/TrumpCard/TrumpCard\";\r\nimport PlayingField from \"../../components/PlayingField/PlayingField\";\r\nimport UserCards from \"../../components/UserCards/UserCards\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: 10,\r\n        marginTop: 50,\r\n    },\r\n});\r\n\r\ninterface Props {}\r\n\r\ninterface CardProps {\r\n    type: string;\r\n    value: string;\r\n}\r\n\r\nconst Gaigel: React.FC<Props> = () => {\r\n    const classes = useStyles();\r\n\r\n    // Latest response from server\r\n    const [response, setResponse] = useState(\"\");\r\n\r\n    // Amount of players that are currently playing\r\n    const [playerCount, setPlayerCount] = useState<number>(4);\r\n\r\n    // The cards that can still be drawn from the talon\r\n    const [talonCards, setTalonCards] = useState<CardProps[]>(\r\n        new Array(0).fill({ type: \"\", value: \"\" })\r\n    );\r\n\r\n    // The trump card\r\n    const [trumpCard, setTrumpCard] = useState<CardProps>({ type: \"\", value: \"\" });\r\n\r\n    // The cards that are currently being played\r\n    const [playedCards, setPlayedCards] = useState<CardProps[]>([\r\n        { type: \"Herz\", value: \"U\" },\r\n        { type: \"Eichel\", value: \"7\" },\r\n    ]);\r\n\r\n    // The cards that the user currently has\r\n    const [userCards, setUserCards] = useState<CardProps[]>(\r\n        new Array(0).fill({ type: \"\", value: \"\" })\r\n    );\r\n\r\n    const playCard = (type: string, value: string) => {\r\n        // The array of played cards is filled up with empty entries in PlayingField.tsx in order to make empty GaigelCards\r\n        // For some reason those also append to playedCards\r\n        // Therefore they need to be filtered out\r\n        let actualPlayedCards: CardProps[] = playedCards.filter(\r\n            (card) => card.type !== \"\" && card.value !== \"\"\r\n        );\r\n        if (actualPlayedCards.length < playerCount) {\r\n            let playedCardIndex: number = userCards.findIndex((card) => {\r\n                return card.type === type && card.value === value;\r\n            });\r\n            setUserCards(userCards.filter((card, index) => index !== playedCardIndex));\r\n\r\n            setPlayedCards(() => [...actualPlayedCards, { type: type, value: value }]);\r\n        }\r\n    };\r\n\r\n    const drawCard = (amount: number) => {\r\n        if (userCards.length < 5 && talonCards.length > 0) {\r\n            // Gets last cards of the talon array and removes them\r\n            let drawnCards: CardProps[] = talonCards.slice(talonCards.length - amount);\r\n            setTalonCards(talonCards.slice(0, talonCards.length - amount));\r\n\r\n            let newUserCards: CardProps[] = userCards;\r\n            drawnCards.forEach((card) => {\r\n                newUserCards.push(card);\r\n            });\r\n\r\n            newUserCards.sort((a, b): number => {\r\n                const points = new Map();\r\n                points.set(\"7\", 0);\r\n                points.set(\"U\", 2);\r\n                points.set(\"O\", 3);\r\n                points.set(\"K\", 4);\r\n                points.set(\"10\", 10);\r\n                points.set(\"A\", 11);\r\n                if (points.get(a.value) < points.get(b.value)) {\r\n                    return -1;\r\n                }\r\n                if (points.get(a.value) > points.get(b.value)) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n            newUserCards.sort((a, b): number => {\r\n                //\"Eichel\", \"Blatt\", \"Herz\", \"Schellen\"\r\n                const trump = new Map();\r\n                trump.set(\"Eichel\", 0);\r\n                trump.set(\"Blatt\", 1);\r\n                trump.set(\"Herz\", 2);\r\n                trump.set(\"Schellen\", 3);\r\n\r\n                if (trumpCard.type === a.type || trumpCard.type === b.type) {\r\n                    trump.set(trumpCard.type, 5);\r\n                }\r\n\r\n                if (trump.get(a.value) < trump.get(b.value)) {\r\n                    return -1;\r\n                }\r\n                if (trump.get(a.value) > trump.get(b.value)) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n            // Gives drawn cards to player\r\n            setUserCards(newUserCards);\r\n        }\r\n    };\r\n\r\n    const chooseTrumpCard = () => {\r\n        let newTrumpCard: CardProps = talonCards[talonCards.length - 1];\r\n        setTalonCards(talonCards.slice(0, talonCards.length - 1));\r\n\r\n        setTrumpCard(newTrumpCard);\r\n    };\r\n\r\n    const createTalon = () => {\r\n        let types: string[] = [\"Eichel\", \"Blatt\", \"Herz\", \"Schellen\"];\r\n        // let types: string[] = [\"Eichel\"];\r\n        let values: string[] = [\"7\", \"U\", \"O\", \"K\", \"10\", \"A\"];\r\n        let newTalon: CardProps[] = [];\r\n\r\n        types.forEach((type) =>\r\n            values.forEach((value) => {\r\n                newTalon.push({ type: type, value: value });\r\n            })\r\n        );\r\n\r\n        newTalon.push(...newTalon);\r\n        fisherYatesShuffle(newTalon);\r\n\r\n        setTalonCards(newTalon);\r\n    };\r\n\r\n    // Reliable shuffling algorithm\r\n    // Source: https://www.delftstack.com/de/howto/javascript/shuffle-array-javascript/\r\n    const fisherYatesShuffle = (arr: CardProps[]) => {\r\n        for (let i = arr.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        }\r\n    };\r\n\r\n    const handOutCards = () => {\r\n        if (userCards.length === 0) {\r\n            drawCard(3);\r\n            return;\r\n        }\r\n        if (trumpCard.value === \"\") {\r\n            chooseTrumpCard();\r\n            return;\r\n        }\r\n        if (userCards.length === 3) {\r\n            drawCard(2);\r\n            return;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"UseEffect 1 was called\");\r\n        createTalon();\r\n\r\n        const socket = socketIOClient(\"http://127.0.0.1:5000\");\r\n        socket.on(\"onConnectionMessage\", (data) => {\r\n            setResponse(data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(\"UseEffect 2 was called\");\r\n        handOutCards();\r\n    }, [talonCards]);\r\n\r\n    return (\r\n        <Grid\r\n            className={classes.root}\r\n            justifyContent=\"center\"\r\n            alignContent=\"space-around\"\r\n            container\r\n        >\r\n            {\" \"}\r\n            <Typography>|{response}|</Typography>\r\n            <Grid justifyContent=\"center\" alignItems=\"center\" container>\r\n                <Talon cardsLeft={talonCards.length} drawCard={drawCard} />\r\n                <TrumpCard trumpCard={trumpCard} />\r\n            </Grid>\r\n            <PlayingField playedCards={playedCards} playerCount={playerCount} />\r\n            <UserCards userCards={userCards} playCard={playCard} />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Gaigel;\r\n","import Box from \"@material-ui/core/Box\";\r\n\r\nimport Gaigel from \"./components/Gaigel/Gaigel\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <Box>\r\n            <Gaigel />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n   /* roboto-300 - latin */\r\n//   @font-face {\r\n//     font-family: 'Roboto';\r\n//     font-style: normal;\r\n//     font-weight: 300;\r\n//     src: url('../fonts/roboto-v27-latin-300.eot'); /* IE9 Compat Modes */\r\n//     src: local(''),\r\n//          url('../fonts/roboto-v27-latin-300.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n//          url('../fonts/roboto-v27-latin-300.woff2') format('woff2'), /* Super Modern Browsers */\r\n//          url('../fonts/roboto-v27-latin-300.woff') format('woff'), /* Modern Browsers */\r\n//          url('../fonts/roboto-v27-latin-300.ttf') format('truetype'), /* Safari, Android, iOS */\r\n//          url('../fonts/roboto-v27-latin-300.svg#Roboto') format('svg'); /* Legacy iOS */\r\n//   }\r\n\r\n   *{\r\n        margin: 0;\r\n        padding: 0;\r\n        -moz-box-sizing: border-box;\r\n        -webkit-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n        font-family: \"Roboto\", sans-serif;\r\n   }\r\n\r\n   /* This is here to make my eyes hurt less at night */\r\n   body{\r\n      /* background-color: #292929; */\r\n   }\r\n\r\n   /* html {\r\n        font-size: 62.5%;\r\n   } */\r\n   `;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\nimport GlobalStyle from \"./GlobalStyle\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#c62828\",\r\n        },\r\n        secondary: {\r\n            main: \"#ff9800\",\r\n        },\r\n        background: {\r\n            default: \"#00ff00\",\r\n        },\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <GlobalStyle />\r\n        <ThemeProvider theme={theme}>\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}